#pragma once
#include <string>
#include <map>
#include <list>

#include "minijavab/core/ir/Function.h"

namespace MiniJavab {
namespace Core {
namespace IR {

/// A special function that's generated by the backend
class IntrinsicFunction : public Function {
    public:
        /// Creates a new intrinsic function. Meant to be lazily-registered
        /// by the owning module
        /// @param name The name of the intrinsic function 
        /// @param type The type of the function
        IntrinsicFunction(std::string name, FunctionType* type);

        /// Results in an assertion violation as intrinsic functions are not defined
        void AppendBasicBlock(BasicBlock* block) override;

        /// Results in an assertion violation as intrinsic functions are not defined
        BasicBlock* CreateBlock(std::string name) override;

        /// Results in an assertion violation as intrinsic functions are not defined
        std::list<BasicBlock*>* GetBlocks() override;

        /// Whether or not this function provides an implementation. Non-defined
        /// functions may defined in an external module or provided by external tooling.
        /// @return False as intrinsic functions are not defined
        bool IsDefined() const override;
};

}}} // end namespace